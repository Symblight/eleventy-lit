const fs = require('fs');
const postcss = require("postcss");
const postcssCustomMedia = require("postcss-custom-media");
const postcssHasPseudo = require("css-has-pseudo");
const pimport = require("postcss-import");
const htmlmin = require("html-minifier-terser");
const minmax = require("postcss-media-minmax");
const esbuild = require("esbuild");
const litPlugin = require('@lit-labs/eleventy-plugin-lit');

module.exports = (config) => {
  config.addTemplateFormats("css");

  const styles = [
    "./src/styles/index.css",
  ];
  const postcssPlugins = [
    pimport,
    minmax,
    postcssHasPseudo,
    postcssCustomMedia,
  ];

  config.addExtension("css", {
    outputFileExtension: "css",
    compile: async (inputContent, inputPath) => {
      if (!styles.includes(inputPath)) {
        return;
      }

      return async () => {
        let output = await postcss(postcssPlugins).process(inputContent, {
          from: inputPath,
        });

        return output.css;
      };
    },
  });

  config.addNunjucksAsyncFilter("css", (path, callback) => {
    fs.readFile(path, "utf8", (error, content) => {
      console.log(content)
      postcss(postcssPlugins)
        .process(content, {
          from: path,
        })
        .then((output) => {
          callback(null, output.css);
        });
    });
  });

  // HTML

  config.addTransform("html-minify", (content, path) => {
    if (path && path.endsWith(".html")) {
      return htmlmin.minify(content, {
        collapseBooleanAttributes: true,
        collapseWhitespace: true,
        decodeEntities: true,
        includeAutoGeneratedTags: false,
        removeComments: true,
        sortAttributes: true,
        sortClassName: true,
      });
    }

    return content;
  });

  // JavaScript

  config.addTemplateFormats("js");

  config.addExtension("js", {
    outputFileExtension: "js",
    compile: async (content, path) => {
      if (path !== "./src/scripts/index.js") {
        return;
      }

      return async () => {
        return esbuild.buildSync({
          entryPoints: [path],
          minify: true,
          bundle: true,
          write: false,
        }).outputFiles[0].text;
      };
    },
  });

  const wcs = ["sv-demo-greeter"]

  config.addPlugin(litPlugin, {
    mode: 'worker',
    componentModules: wcs.map((wc) => `./src/scripts/${wc}.js`),
  });

  return {
    dir: {
      input: "src",
      output: "dist",
      includes: "includes",
      layouts: "layouts",
      data: "data",
    },
    dataTemplateEngine: "njk",
    markdownTemplateEngine: "njk",
    htmlTemplateEngine: "njk",
    templateFormats: ["md", "njk"],
  };
};
